{"version":3,"sources":["constants/index.js","graphql/index.js","actions/index.js","components/Square.jsx","components/Board.jsx","components/Spinner.jsx","components/Log.jsx","App.js","reducers/utils.js","reducers/index.js","middleware/api.js","serviceWorker.js","index.js","middleware/ai.js"],"names":["CHESS_AND_CONSTANTS","MOVE","KEYS","PIECE_VISUALS","AI_COLOR","CHESS_FRAGMENT","GET_CONSTANTS_AND_CHESS","MAKE_MOVE","pieceSelected","squareId","type","moveInitiated","fen","move","query","variables","types","Square","piece","isDark","isActive","targetedBy","onClick","symbol","ariaLabel","classNames","push","colorName","typeName","id","aria-label","disabled","className","join","Board","dispatch","useDispatch","chess","useSelector","state","constants","ui","useCallback","pieceSelectedAction","moves","filter","from","selectedSquare","find","to","promotion","pieceConstants","moveInitiatedAction","colorsBySymbol","turn","squares","map","isTargeted","targets","includes","pieceExpanded","piecesBySymbol","color","key","Spinner","appStatus","loading","Log","records","log","role","aria-live","aria-atomic","record","index","App","useEffect","generatePiecesBySymbol","Object","entries","reduce","result","generateColorsBySymbol","colorConstants","mapChessDataToState","movesBySquare","nextMove","movesForSquare","generateMovesBySquare","board","list","row","mappedRow","square","file","rank","generateSquares","generateSelectedSquare","selectedSquareId","updateLog","pieceTitle","toLowerCase","message","timestamp","formatDate","Date","startGameLog","initialState","headers","Boolean","window","location","hostname","match","middleware","next","action","a","request","receive","failure","queryOptions","body","JSON","stringify","options","method","data","fetch","process","response","ok","json","errors","Error","normalized","name","stack","store","getState","analysis","bestMove","Promise","resolve","setTimeout","enhancers","composeWithDevTools","applyMiddleware","createStore","flagConstants","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.f5c535cf.chunk.js","sourcesContent":["export const CALL_API = 'CALL_API'\n\nexport const CHESS_AND_CONSTANTS = {\n  REQUEST: 'chess-and-constants/REQUEST',\n  RECEIVE: 'chess-and-constants/RECEIVE',\n  FAILURE: 'chess-and-constants/FAILURE'\n}\n\nexport const MOVE = {\n  REQUEST: 'move/REQUEST',\n  RECEIVE: 'move/RECEIVE',\n  FAILURE: 'move/FAILURE'\n}\n\nexport const PIECE_SELECTED = 'PIECE_SELECTED'\n\nexport const KEYS = {\n  BLACK: 'BLACK',\n  WHITE: 'WHITE',\n  KING: 'KING',\n  QUEEN: 'QUEEN',\n  ROOK: 'ROOK',\n  BISHOP: 'BISHOP',\n  KNIGHT: 'KNIGHT',\n  PAWN: 'PAWN',\n  FLAGS: 'FLAGS'\n}\n\nexport const PIECE_VISUALS = {\n  [KEYS.KING]: {\n    [KEYS.BLACK]: '\\u265A',\n    [KEYS.WHITE]: '\\u2654'\n  },\n  [KEYS.QUEEN]: {\n    [KEYS.BLACK]: '\\u265B',\n    [KEYS.WHITE]: '\\u2655'\n  },\n  [KEYS.ROOK]: {\n    [KEYS.BLACK]: '\\u265C',\n    [KEYS.WHITE]: '\\u2656'\n  },\n  [KEYS.BISHOP]: {\n    [KEYS.BLACK]: '\\u265D',\n    [KEYS.WHITE]: '\\u2657'\n  },\n  [KEYS.KNIGHT]: {\n    [KEYS.BLACK]: '\\u265E',\n    [KEYS.WHITE]: '\\u2658'\n  },\n  [KEYS.PAWN]: {\n    [KEYS.BLACK]: '\\u265F',\n    [KEYS.WHITE]: '\\u2659'\n  }\n}\n\nexport const USER_COLOR = KEYS.WHITE\nexport const AI_COLOR = KEYS.BLACK\n","const CHESS_FRAGMENT = `\n  fragment ChessAttributes on Chess {\n      analysis {\n        bestMove {\n          from\n          to\n          flags\n        }\n        ponderMove {\n          from\n          to\n          flags\n        }\n      }\n      board {\n        rank\n        squares {\n          file\n          piece {\n            type\n            color\n          }\n        }\n      }\n      fen\n      gameOver\n      inCheck\n      inCheckmate\n      inDraw\n      inStalemate\n      insufficientMaterial\n      inThreefoldRepetition\n      moves {\n        color\n        from\n        to\n        promotion\n        flags\n      }\n      turn\n  }\n`\n\nexport const GET_CONSTANTS_AND_CHESS = `\n  ${CHESS_FRAGMENT}\n\n  fragment ColorConstants on Constants {\n    BLACK\n    WHITE\n  }\n\n  fragment PieceConstants on Constants {\n    BISHOP\n    KING\n    KNIGHT\n    PAWN\n    QUEEN\n    ROOK\n  }\n\n  fragment FlagConstants on Constants {\n    FLAGS {\n      NORMAL\n      CAPTURE\n      BIG_PAWN\n      EP_CAPTURE\n      PROMOTION\n      KSIDE_CASTLE\n      QSIDE_CASTLE\n    }\n  }\n\n  {\n    chess {\n      ... ChessAttributes\n    }\n\n    colorConstants: constants {\n      ... ColorConstants\n    }\n\n    pieceConstants: constants {\n      ... PieceConstants\n    }\n\n    flagConstants: constants {\n      ... FlagConstants\n    }\n  }\n`\n\nexport const MAKE_MOVE = `\n  ${CHESS_FRAGMENT}\n\n  mutation makeMove($fen: String!, $move: MoveObjectInput!){\n    chess: move (input: {\n      fen: $fen,\n      move: $move\n    }) {\n      ... ChessAttributes\n    }\n  }\n`\n","import {\n  CALL_API,\n  CHESS_AND_CONSTANTS,\n  PIECE_SELECTED,\n  MOVE\n} from '../constants'\n\nimport {\n  GET_CONSTANTS_AND_CHESS,\n  MAKE_MOVE\n} from '../graphql'\n\nexport function startApp() {\n  return {\n    [CALL_API]: {\n      query: GET_CONSTANTS_AND_CHESS,\n      types: [\n        CHESS_AND_CONSTANTS.REQUEST,\n        CHESS_AND_CONSTANTS.RECEIVE,\n        CHESS_AND_CONSTANTS.FAILURE\n      ]\n    }\n  }\n}\n\nexport function pieceSelected(squareId) {\n  return { type: PIECE_SELECTED, squareId }\n}\n\nexport function moveInitiated(fen, move) {\n  return {\n    [CALL_API]: {\n      query: MAKE_MOVE,\n      variables: {\n        fen,\n        move\n      },\n      types: [\n        MOVE.REQUEST,\n        MOVE.RECEIVE,\n        MOVE.FAILURE\n      ]\n    }\n  }\n}\n","import React from 'react'\n\nimport {\n  PIECE_VISUALS,\n  KEYS\n} from '../constants'\n\nexport default function Square({ squareId, piece, isDark, isActive, targetedBy, onClick }) {\n  let symbol = null\n  let ariaLabel = `${squareId} is empty`\n  let classNames = ['chess-board-square']\n\n  if (isDark) {\n    classNames.push('chess-board-square--dark')\n  }\n\n  if (piece) {\n    ariaLabel = `${squareId} contains a ${piece.colorName} ${piece.typeName}`\n    symbol = PIECE_VISUALS[piece.typeName][piece.colorName]\n\n    if (piece.colorName === KEYS.BLACK) {\n      classNames.push('chess-board-square--black-piece')\n    }\n  }\n\n  if (isActive) {\n    classNames.push('chess-board-square--active')\n    ariaLabel =\n      `${squareId} contains a ${piece.colorName} ${piece.typeName} selected for move.${' '\n      } Use the tab keys to select a square to initiate move.${' '\n      } Press again to cancel selection.`\n  }\n\n  if (targetedBy) {\n    classNames.push('chess-board-square--targeted')\n    ariaLabel = `Move ${targetedBy.piece.typeName} on ${targetedBy.id} ${\n      piece ? `to capture ${piece.typeName} on ${squareId}` : `to ${squareId}`\n    }`\n  }\n\n  return (\n    <button\n      type=\"button\"\n      aria-label={ariaLabel}\n      disabled={!onClick}\n      className={classNames.join(' ')}\n      onClick={() => onClick(squareId)}>\n      {symbol}\n    </button>\n  )\n}\n","import React, { useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { KEYS } from '../constants'\n\nimport {\n  pieceSelected as pieceSelectedAction,\n  moveInitiated as moveInitiatedAction\n} from '../actions'\n\nimport Square from './Square'\n\nexport default function Board() {\n  const dispatch = useDispatch()\n\n  const chess = useSelector(state => state.chess)\n  const constants = useSelector(state => state.constants)\n  const ui = useSelector(state => state.ui)\n\n  const pieceSelected = useCallback(\n    (squareId) =>\n      dispatch(\n        pieceSelectedAction(squareId)\n      )\n    , [dispatch]\n  )\n\n  const moveInitiated = useCallback(\n    (squareId) => {\n      let { from, to, promotion } = chess.moves\n        .filter(\n          (move) => move.from === ui.selectedSquare.id\n        ).find(\n          (move) => move.to === squareId\n        )\n\n      if (promotion) {\n        promotion = constants.pieceConstants[KEYS.QUEEN]\n      }\n\n      dispatch(\n        moveInitiatedAction(chess.fen, { from, to, promotion })\n      )\n    }, [dispatch, chess, constants, ui]\n  )\n\n  if (!chess) {\n    return <div className=\"chess-board--loading\"/>\n  }\n\n  const classNames= ['chess-board']\n\n  if (constants.colorsBySymbol[chess.turn] === KEYS.BLACK) {\n    classNames.push('chess-board--black-turn')\n  }\n\n  return (\n    <div className={classNames.join(' ')}>\n      {chess.squares.map(({ id: squareId, piece, isDark }) => {\n        const isActive = (\n          squareId === ui.selectedSquare?.id\n        )\n\n        const isTargeted = (\n          ui.selectedSquare?.targets?.includes(squareId)\n        )\n\n        const targetedBy = (\n          isTargeted ? ui.selectedSquare : null\n        )\n\n        const onClick = isTargeted ? moveInitiated : (\n          piece ? pieceSelected : null\n        )\n\n        const pieceExpanded = piece && {\n          typeName: constants.piecesBySymbol[piece.type],\n          colorName: constants.colorsBySymbol[piece.color],\n          ...piece\n        }\n\n        return (\n          <Square\n            key={squareId}\n            piece={pieceExpanded}\n            squareId={squareId}\n            isDark={isDark}\n            isActive={isActive}\n            targetedBy={targetedBy}\n            onClick={onClick}/>\n        )\n      })}\n    </div>\n  )\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nexport default function Spinner() {\n  const appStatus = useSelector(state => state.appStatus)\n\n  const {\n    loading\n  } = appStatus\n\n  if (!loading) {\n    return null\n  }\n\n  return (\n    <div className=\"spinner\">\n      <div className=\"spinner-icon\"></div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\n\n// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_log_role\nexport default function Log(){\n  const records = useSelector(state => state.log)\n\n  return (\n    <div className=\"console\" role=\"log\">\n      <ul className=\"console-output\" aria-live=\"polite\" aria-atomic=\"false\">\n        {records?.map((record, index) =>\n          <li key={index} className=\"console-output-item\">{record}</li>\n        )}\n      </ul>\n    </div>\n  )\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux'\n\nimport { startApp } from './actions'\n\nimport Board from './components/Board'\nimport Spinner from './components/Spinner'\nimport Log from './components/Log'\n\nexport default function App() {\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(startApp())\n  }, [dispatch])\n\n  return (\n    <>\n      <Board/>\n      <Log/>\n      <Spinner/>\n    </>\n  );\n}\n","import formatDate from 'date-fns/format'\n\nexport function generatePiecesBySymbol(pieceConstants) {\n  return Object.entries(pieceConstants).reduce(\n    (result, [typeName, symbol]) => {\n      return {\n        [symbol]: typeName,\n        ...result\n      }\n    }\n  , {})\n}\n\nexport function generateColorsBySymbol(colorConstants) {\n  return Object.entries(colorConstants).reduce(\n    (result, [colorName, symbol]) => {\n      return {\n        [symbol]: colorName,\n        ...result\n      }\n    }\n  , {})\n}\n\nexport function generateMovesBySquare(chess) {\n  return chess.moves\n    .reduce((result, nextMove) => {\n      const movesForSquare = result[nextMove.from] || []\n      return {\n        ...result,\n        [nextMove.from]: [...movesForSquare, nextMove]\n      }\n    }, {})\n}\n\nexport function generateSquares(chess) {\n  return chess.board.reduce(\n      (list, row) => {\n        const mappedRow = row.squares.map(\n          (square, index) => ({\n            piece: square.piece,\n            id: `${square.file}${row.rank}`,\n            isDark: row.rank % 2 ? !(index % 2) : index % 2\n          })\n        )\n        return [ ...list, ...mappedRow ]\n      },\n    [])\n}\n\nexport function mapChessDataToState(chess) {\n  const movesBySquare = generateMovesBySquare(chess)\n  const squares = generateSquares(chess)\n\n  return {\n    ...chess,\n    squares,\n    movesBySquare\n  }\n}\n\nexport function generateSelectedSquare(state, selectedSquareId) {\n  const canceled = (\n    selectedSquareId === state.ui.selectedSquare?.id\n  )\n\n  if (canceled) {\n    return {\n      ...state,\n      ui: { selectedSquareId: null }\n    }\n  }\n\n  const square = state.chess.squares.find(\n    (square) =>\n      square.id === selectedSquareId\n    )\n\n  const typeName = state.constants.piecesBySymbol[square.piece.type]\n  const colorName = state.constants.colorsBySymbol[square.piece.color]\n\n  const moves = state.chess.movesBySquare[square.id]\n  const targets = moves?.map(\n      (move) => move.to\n    )\n\n  const selectedSquare = {\n    ...square,\n    targets,\n    piece: {\n      ...square.piece,\n      typeName,\n      colorName\n    }\n  }\n\n  return {\n    selectedSquare\n  }\n}\n\nexport function updateLog(state, move) {\n  const from = state.chess.squares.find(\n      (square) => square.id === move.from\n    )\n\n  const to = state.chess.squares.find(\n      (square) => square.id === move.to\n    )\n\n  const {\n    piecesBySymbol,\n    colorsBySymbol\n  } = state.constants\n\n  const pieceTitle = (piece) => (\n    `${colorsBySymbol[piece.color]} ${piecesBySymbol[piece.type]}`.toLowerCase()\n  )\n\n  let message = `${pieceTitle(from.piece)} moves from ${from.id} to ${to.id}`\n\n  if (to.piece) {\n    message = `${message} to capture ${pieceTitle(to.piece)}`\n  }\n\n  const timestamp = formatDate(new Date(), 'HH:mm:ss')\n\n  return [\n    ...state.log,\n    `[${timestamp}] ${message}`\n  ]\n}\n\nexport function startGameLog() {\n  const timestamp = formatDate(new Date(), 'HH:mm:ss')\n  return [\n    `[${timestamp}] Game ready`\n  ]\n}\n","import {\n  CHESS_AND_CONSTANTS,\n  PIECE_SELECTED,\n  MOVE\n} from '../constants'\n\nimport {\n  generateColorsBySymbol,\n  generatePiecesBySymbol,\n  mapChessDataToState,\n  generateSelectedSquare,\n  updateLog,\n  startGameLog\n} from './utils'\n\nconst initialState = {\n  appStatus: {\n    loading: true\n  },\n  chess: null,\n  constants: null,\n  ui: {\n    selectedSquare: null\n  },\n  log: null\n}\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case CHESS_AND_CONSTANTS.REQUEST:\n    case MOVE.REQUEST: {\n      return {\n        ...state,\n        appStatus: { loading: true }\n      }\n    }\n\n    case CHESS_AND_CONSTANTS.RECEIVE: {\n      const {\n        pieceConstants,\n        colorConstants,\n        flagConstants,\n        chess\n      } = action.data\n\n      return {\n        ...state,\n        ui: { selectedSquare: null },\n        appStatus: { loading: false },\n        chess: mapChessDataToState(chess),\n        constants: {\n          piecesBySymbol: generatePiecesBySymbol(pieceConstants),\n          colorsBySymbol: generateColorsBySymbol(colorConstants),\n          pieceConstants,\n          colorConstants,\n          flagConstants\n        },\n        log: startGameLog()\n      }\n    }\n\n    case PIECE_SELECTED: {\n      return {\n        ...state,\n        ui: generateSelectedSquare(state, action.squareId)\n      }\n    }\n\n    case MOVE.RECEIVE: {\n      return {\n        ...state,\n        appStatus: { loading: false },\n        ui: { selectedSquare: null },\n        chess: mapChessDataToState(action.data.chess),\n        log: updateLog(state, action.variables.move)\n      }\n    }\n\n    case CHESS_AND_CONSTANTS.FAILURE: {\n      return {\n        ...state,\n        appStatus: { loading: false, errors: action.errors }\n      }\n    }\n\n    default:\n      return state\n  }\n}\n","import {\n  CALL_API\n} from '../constants'\n\nconst serverUrl = process.env.REACT_APP_API\nconst method = 'POST'\nconst headers =  {\n  'Content-Type': 'application/json'\n}\n\nexport default () => next => async action => {\n  if (!action[CALL_API]) {\n    return next(action)\n  }\n\n  const {\n    query,\n    variables,\n    types: [request, receive, failure]\n  } = action[CALL_API]\n\n  const queryOptions = { query, variables }\n  const body = JSON.stringify(queryOptions)\n  const options = { method, headers, body }\n\n  next({\n    type: request,\n    data: { query, variables }\n  })\n\n  try {\n    const response = await fetch(serverUrl, options)\n\n    if (response.ok) {\n      const json = await response.json()\n      const { data, errors } = json\n\n      if (data) {\n        next({ type: receive, data, variables })\n      }\n\n      if (errors) {\n        next({ type: failure, errors })\n      }\n    } else {\n      throw new Error('Response not ok')\n    }\n  } catch(error) {\n    let normalized = error\n    if (error instanceof Error) {\n      normalized = {\n        name: error.name,\n        message: error.message,\n        stack: error.stack\n      }\n    }\n    next({ type: failure, errors: [normalized] })\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// import '98.css'\nimport './style/index.css';\nimport './style/breakpoints.css';\nimport './style/spinner.css';\n\nimport App from './App';\nimport reducers from './reducers'\nimport api from './middleware/api'\nimport ai from './middleware/ai'\nimport * as serviceWorker from './serviceWorker';\n\nconst middleware = [api, ai]\nconst enhancers = composeWithDevTools(applyMiddleware(...middleware))\nconst store = createStore(reducers, enhancers)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {\n  MOVE,\n  AI_COLOR\n} from '../constants'\n\nimport {\n  pieceSelected,\n  moveInitiated\n} from '../actions'\n\nconst aiMoveDelay = 1000\n\nexport default store => next => async action => {\n  next(action)\n\n  if (action.type === MOVE.RECEIVE) {\n    const {\n      constants: {\n        colorConstants\n      },\n      chess: {\n        fen,\n        turn,\n        analysis: {\n          bestMove: { from, to } // todo check for promotion flag\n        }\n      }\n    } = store.getState()\n\n    if (turn === colorConstants[AI_COLOR]) {\n      store.dispatch(pieceSelected(from))\n      await new Promise(resolve => setTimeout(resolve, aiMoveDelay))\n      store.dispatch(moveInitiated(fen, { from, to }))\n    }\n  }\n}\n"],"sourceRoot":""}