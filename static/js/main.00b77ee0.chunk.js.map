{"version":3,"sources":["constants/actions.js","constants/graphql.js","hooks/useAppDispatch.js","hooks/useAPI.js","constants/misc.js","constants/colors.js","constants/selectors.js","hooks/useAppState.js","hooks/useActiveSquare.js","constants/pieces.js","hooks/useInitiateMove.js","constants/visuals.js","components/Square.jsx","components/Board.jsx","components/GameLog.jsx","hooks/useGameLog.js","hooks/useScrollToBottom.js","App.js","hooks/useQueryChess.js","hooks/useAI.js","reducers/chess.js","reducers/appStatus.js","reducers/gameLog.js","reducers/ui.js","reducers/index.js","components/Provider.jsx","serviceWorker.js","index.js"],"names":["APP_STARTED","MOVE_INITIATED","CHESS_FRAGMENT","GET_CHESS","MAKE_MOVE","AppDispatchContext","React","createContext","useAppDispatch","useContext","headers","useAPI","dispatch","useCallback","a","query","variables","types","request","receive","failure","queryOptions","body","JSON","stringify","options","method","type","data","fetch","process","response","ok","json","errors","Error","normalized","name","message","stack","colors","WHITE","BLACK","colorsBySymbol","Map","Object","entries","map","key","USER_COLOR","AI_COLOR","selectAppStatus","state","appStatus","selectChess","chess","selectGameLog","gameLog","selectUI","ui","AppStateContext","useAppState","selector","useMemo","useActiveSquare","activeSquareId","squares","movesBySquare","square","find","id","moves","targets","Set","move","to","squareId","pieces","PAWN","KNIGHT","BISHOP","ROOK","QUEEN","KING","piecesBySymbol","useInitiateMove","callAPI","sourceSquareId","destinationSquareId","from","promotion","PIECES","fen","visuals","COLORS","getPieceLabel","piece","colorName","get","color","pieceName","toLowerCase","memo","isDark","isActive","targetedBy","onClick","symbol","ariaLabel","classNames","push","PIECE_VISUALS","data-testid","aria-label","aria-pressed","disabled","className","join","Board","activeSquare","setActiveSquare","initiateMove","turn","isPlayerTurn","isTargeted","has","GameLog","ref","useRef","sendToLog","processMove","inCheckmate","inCheck","useEffect","initializing","pendingMove","useGameLog","current","scrollTop","scrollHeight","useScrollToBottom","role","aria-live","aria-atomic","gameEvent","index","dateTime","time","App","useQueryChess","gameOver","moveInitiated","performMove","analysis","bestMove","Promise","resolve","setTimeout","useAI","mapChessDataToState","reduce","result","nextMove","movesForSquare","generateMovesBySquare","board","list","row","mappedRow","file","rank","generateSquares","initialState","reducers","action","formatDate","Date","canceled","root","nextState","slice","reducer","Provider","children","undefined","useReducer","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.00b77ee0.chunk.js","sourcesContent":["export const INIT_STATE = 'INIT_STATE'\n\nexport const APP_STARTED = {\n  REQUEST: 'chess/REQUEST',\n  RECEIVE: 'chess/RECEIVE',\n  FAILURE: 'chess/FAILURE'\n}\n\nexport const MOVE_INITIATED = {\n  REQUEST: 'move/REQUEST',\n  RECEIVE: 'move/RECEIVE',\n  FAILURE: 'move/FAILURE'\n}\n\nexport const PIECE_SELECTED = 'PIECE_SELECTED'\n\nexport const EVENT_LOGGED = 'EVENT_LOGGED'\n","const CHESS_FRAGMENT = `\n  fragment ChessAttributes on Chess {\n      analysis {\n        bestMove {\n          from\n          to\n          flags\n        }\n        ponderMove {\n          from\n          to\n          flags\n        }\n      }\n      board {\n        rank\n        squares {\n          file\n          piece {\n            type\n            color\n          }\n        }\n      }\n      fen\n      gameOver\n      inCheck\n      inCheckmate\n      inDraw\n      inStalemate\n      insufficientMaterial\n      inThreefoldRepetition\n      moves {\n        color\n        from\n        to\n        promotion\n        flags\n      }\n      turn\n  }\n`\n\nexport const GET_CHESS = `\n  ${CHESS_FRAGMENT}\n  query Chess {\n    chess {\n      ... ChessAttributes\n    }\n  }\n`\n\nexport const MAKE_MOVE = `\n  ${CHESS_FRAGMENT}\n\n  mutation Move($fen: String!, $move: MoveObjectInput!){\n    chess: move (input: {\n      fen: $fen,\n      move: $move\n    }) {\n      ... ChessAttributes\n    }\n  }\n`\n","import React, { useContext } from 'react'\n\nexport const AppDispatchContext = React.createContext(null);\n\nexport default function useAppDispatch() {\n  return useContext(AppDispatchContext)\n}\n","import { useCallback } from 'react'\n\nimport useAppDispatch from './useAppDispatch'\n\nconst serverUrl = process.env.REACT_APP_API\nconst method = 'POST'\nconst headers =  {\n  'Content-Type': 'application/json'\n}\n\nexport default function useAPI() {\n  const dispatch = useAppDispatch()\n\n  return useCallback(\n    async ({ query, variables, types }) => {\n      const [request, receive, failure] = types\n      const queryOptions = { query, variables }\n      const body = JSON.stringify(queryOptions)\n      const options = { method, headers, body }\n\n      dispatch({\n        type: request,\n        data: { query, variables }\n      })\n\n      try {\n        const response = await fetch(serverUrl, options)\n\n        if (response.ok) {\n          const json = await response.json()\n          const { data, errors } = json\n\n          dispatch({ type: receive, data, errors })\n        } else {\n          throw new Error('Response not ok')\n        }\n      } catch(error) {\n        let normalized = error\n        if (error instanceof Error) {\n          normalized = {\n            name: error.name,\n            message: error.message,\n            stack: error.stack\n          }\n        }\n\n        dispatch({ type: failure, errors: [normalized] })\n      }\n    }\n  , [dispatch])\n}\n","export const AI_MOVE_DELAY = 1000\n","const colors = {\n  WHITE: 'w',\n  BLACK: 'b'\n}\n\nexport const colorsBySymbol =  new Map(\n  Object.entries(colors).map(\n    ([key, value]) => [value, key]\n  )\n)\n\nexport const USER_COLOR = colors.WHITE\nexport const AI_COLOR = colors.BLACK\n\nexport default colors\n","export function selectAppStatus(state) {\n  return state.appStatus\n}\n\nexport function selectChess(state) {\n  return state.chess\n}\n\nexport function selectGameLog(state) {\n  return state.gameLog\n}\n\nexport function selectUI(state) {\n  return state.ui\n}\n","import React, { useContext } from 'react'\n\nexport const AppStateContext = React.createContext(null);\n\nexport default function useAppState(selector) {\n  const state = useContext(AppStateContext)\n  return React.useMemo(\n    () => {\n      return selector(state)\n    }\n  ,[selector, state])\n}\n","import React from 'react'\n\nimport {\n  PIECE_SELECTED\n} from '../constants/actions'\n\nimport {\n  selectUI,\n  selectChess\n} from '../constants/selectors'\n\nimport useAppDispatch from './useAppDispatch'\n\nimport useAppState from './useAppState'\n\nexport default function useActiveSquare() {\n  const dispatch = useAppDispatch()\n  const chess = useAppState(selectChess)\n  const { activeSquareId } = useAppState(selectUI)\n\n  const squares = chess?.squares\n  const movesBySquare = chess?.movesBySquare\n\n  const activeSquare = React.useMemo(() => {\n    if (!activeSquareId) {\n      return null\n    }\n\n    const square = squares.find(\n      (square) =>\n        square.id === activeSquareId\n      )\n\n    const moves = movesBySquare[square.id]\n    const targets = new Set(\n      moves?.map(\n        (move) => move.to\n      )\n    )\n\n    return {\n      ...square,\n      targets\n    }\n  }, [activeSquareId, squares, movesBySquare])\n\n  const setActiveSquare = React.useCallback(\n    (squareId) => (\n      dispatch({ type: PIECE_SELECTED, squareId })\n    )\n  ,[dispatch])\n\n  return [activeSquare, setActiveSquare]\n}\n","const pieces = {\n  PAWN: 'p',\n  KNIGHT: 'n',\n  BISHOP: 'b',\n  ROOK: 'r',\n  QUEEN: 'q',\n  KING: 'k'\n}\n\nexport const piecesBySymbol =  new Map(\n  Object.entries(pieces).map(\n    ([key, value]) => [value, key]\n  )\n)\n\nexport default pieces\n","import { useCallback } from 'react'\n\nimport { MAKE_MOVE } from '../constants/graphql'\nimport { MOVE_INITIATED } from '../constants/actions'\n\nimport PIECES from '../constants/pieces'\nimport useAPI from './useAPI'\n\nexport default function useInitiateMove() {\n  const callAPI = useAPI()\n\n  return useCallback(\n    (chess, sourceSquareId, destinationSquareId) => {\n      let { from, to, promotion } = chess.moves.find(\n        (move) => (\n          move.from === sourceSquareId &&\n          move.to === destinationSquareId\n        )\n      )\n\n      if (promotion) {\n        promotion = PIECES.QUEEN\n      }\n\n      callAPI({\n        query: MAKE_MOVE,\n        variables: {\n          fen: chess.fen,\n          move: { from, to, promotion }\n        },\n        types: [\n          MOVE_INITIATED.REQUEST,\n          MOVE_INITIATED.RECEIVE,\n          MOVE_INITIATED.FAILURE\n        ]\n      })\n    }\n  , [callAPI])\n}\n","import COLORS from './colors'\nimport PIECES from './pieces'\n\nconst visuals = {\n  [PIECES.KING]: {\n    [COLORS.BLACK]: '\\u265A',\n    [COLORS.WHITE]: '\\u2654'\n  },\n  [PIECES.QUEEN]: {\n    [COLORS.BLACK]: '\\u265B',\n    [COLORS.WHITE]: '\\u2655'\n  },\n  [PIECES.ROOK]: {\n    [COLORS.BLACK]: '\\u265C',\n    [COLORS.WHITE]: '\\u2656'\n  },\n  [PIECES.BISHOP]: {\n    [COLORS.BLACK]: '\\u265D',\n    [COLORS.WHITE]: '\\u2657'\n  },\n  [PIECES.KNIGHT]: {\n    [COLORS.BLACK]: '\\u265E',\n    [COLORS.WHITE]: '\\u2658'\n  },\n  [PIECES.PAWN]: {\n    [COLORS.BLACK]: '\\u265F',\n    [COLORS.WHITE]: '\\u2659'\n  }\n}\n\nexport default visuals\n","import React from 'react'\n\nimport PIECE_VISUALS from '../constants/visuals'\n\nimport { piecesBySymbol } from '../constants/pieces'\nimport COLORS, { colorsBySymbol } from '../constants/colors'\n\nfunction getPieceLabel(piece) {\n  const colorName = colorsBySymbol.get(piece.color)\n  const pieceName = piecesBySymbol.get(piece.type)\n  return `${colorName} ${pieceName}`.toLowerCase()\n}\n\nfunction Square({ squareId, piece, isDark, isActive, targetedBy, onClick }) {\n  let symbol = null\n  let ariaLabel = `${squareId} is empty`\n  let classNames = ['chess-board-square', `chess-board-square--${squareId}`]\n\n  if (isDark) {\n    classNames.push('chess-board-square--dark')\n  }\n\n  if (onClick) {\n    classNames.push('chess-board-square--clickable')\n  }\n\n  if (piece) {\n    symbol = PIECE_VISUALS[piece.type][piece.color]\n    ariaLabel = `${squareId} contains a ${getPieceLabel(piece)}`\n\n    if (piece.color === COLORS.BLACK) {\n      classNames.push('chess-board-square--black-piece')\n    }\n  }\n\n  if (isActive) {\n    classNames.push('chess-board-square--active')\n    ariaLabel =\n      `${squareId} contains a ${getPieceLabel(piece)} selected for move.${' '\n      } Use the tab keys to select a square to initiate move.${' '\n      } Press again to cancel selection.`\n  }\n\n  if (targetedBy) {\n    classNames.push('chess-board-square--targeted')\n    ariaLabel =\n      `Move ${getPieceLabel(targetedBy.piece)} on ${targetedBy.id} ${\n      piece ? `to capture ${getPieceLabel(piece)} on ${squareId}` : `to ${squareId}`\n    }`\n  }\n\n  return (\n    <button\n      type=\"button\"\n      data-testid={squareId}\n      aria-label={ariaLabel}\n      aria-pressed={isActive}\n      disabled={!onClick}\n      className={classNames.join(' ')}\n      onClick={onClick ? () => onClick(squareId) : null}>\n      {symbol}\n    </button>\n  )\n}\n\nexport default React.memo(Square)\n","import React from 'react'\n\nimport COLORS, {\n  USER_COLOR\n} from '../constants/colors'\n\nimport { selectChess } from '../constants/selectors'\n\nimport useAppState from '../hooks/useAppState'\nimport useActiveSquare from '../hooks/useActiveSquare'\nimport useInitiateMove from '../hooks/useInitiateMove'\n\nimport Square from './Square'\n\nexport default function Board() {\n  const chess = useAppState(selectChess)\n  const [activeSquare, setActiveSquare] = useActiveSquare()\n  const initiateMove = useInitiateMove()\n\n  if (!chess) {\n    return (\n      <div className=\"chess-board--loading\" data-testid=\"chess-board--loading\">\n        Loading...\n      </div>\n    )\n  }\n\n  const classNames= ['chess-board']\n\n  if (chess.turn === COLORS.BLACK) {\n    classNames.push('chess-board--black-turn')\n  }\n\n  const isPlayerTurn = (\n    chess.turn === USER_COLOR\n  )\n\n  return (\n    <div className={classNames.join(' ')} data-testid=\"chess-board\">\n      {chess.squares.map(\n        ({ id: squareId, piece, isDark }) => {\n          const isActive = (\n            squareId === activeSquare?.id\n          )\n\n          const isTargeted = (\n            activeSquare?.targets?.has(squareId)\n          )\n\n          const targetedBy = (\n            isTargeted ? activeSquare : null\n          )\n\n          let onClick = null\n\n          if (isPlayerTurn) {\n            if (isTargeted) {\n              onClick = (squareId) => initiateMove(chess, activeSquare.id, squareId)\n            } else if (piece?.color === USER_COLOR) {\n              onClick = (squareId) => setActiveSquare(squareId)\n            }\n          }\n\n          return (\n            <Square\n              key={squareId}\n              piece={piece}\n              squareId={squareId}\n              isDark={isDark}\n              isActive={isActive}\n              targetedBy={targetedBy}\n              onClick={onClick}/>\n          )\n        }\n      )}\n    </div>\n  )\n}\n","import React, { useRef } from 'react'\n\nimport { selectGameLog } from '../constants/selectors'\n\nimport useAppState from '../hooks/useAppState'\nimport useGameLog from '../hooks/useGameLog'\nimport useScrollToBottom from '../hooks/useScrollToBottom'\n\nexport default function GameLog(){\n  const gameLog = useAppState(selectGameLog)\n  const ref = useRef(null)\n\n  useGameLog()\n  useScrollToBottom(ref, gameLog)\n\n  return (\n    <div ref={ref} className=\"console\" role=\"log\">\n      <ul className=\"console-output\" aria-live=\"polite\" aria-atomic=\"false\">\n        {gameLog?.map((gameEvent, index) =>\n          <li key={index} className=\"console-output-item\">\n            [<time dateTime={gameEvent.time}>{gameEvent.time}</time>] {gameEvent.message}\n          </li>\n        )}\n      </ul>\n    </div>\n  )\n}\n","import { useEffect, useCallback } from 'react'\n\nimport useAppDispatch from './useAppDispatch'\nimport useAppState from './useAppState'\n\nimport {\n  selectAppStatus,\n  selectChess,\n  selectUI\n} from '../constants/selectors'\n\nimport {\n  EVENT_LOGGED\n} from '../constants/actions'\n\nimport { piecesBySymbol } from '../constants/pieces'\nimport { colorsBySymbol } from '../constants/colors'\n\nexport default function useGameLog() {\n  const dispatch = useAppDispatch()\n  const appStatus = useAppState(selectAppStatus)\n  const chess = useAppState(selectChess)\n  const ui = useAppState(selectUI)\n\n  const sendToLog = useCallback(\n    (data) => {\n      dispatch({ type: EVENT_LOGGED, data })\n    }\n  , [dispatch])\n\n  const processMove = useCallback(\n    (move) => {\n      const from = chess.squares.find(\n        (square) => square.id === move.from\n      )\n\n      const to = chess.squares.find(\n        (square) => square.id === move.to\n      )\n\n      let message = null\n\n      if (to.piece) {\n        message = `\n          ${colorsBySymbol.get(from.piece.color)} ${piecesBySymbol.get(from.piece.type)\n          } on ${from.id} captures ${piecesBySymbol.get(to.piece.type)} on ${to.id}`\n      } else {\n        message = `\n          ${colorsBySymbol.get(from.piece.color)} ${piecesBySymbol.get(from.piece.type)\n          } moves from ${from.id} to ${to.id}`\n      }\n\n      sendToLog(message)\n    }\n  , [chess, sendToLog])\n\n  const reportAppStatus = () => {\n    if (appStatus.initializing) {\n      sendToLog('initializing game...')\n    } else {\n      sendToLog('game ready')\n    }\n  }\n\n  const reportMove = () => {\n    if (ui.pendingMove) {\n      processMove(ui.pendingMove)\n    }\n  }\n\n  const inCheckmate = chess?.inCheckmate\n  const inCheck = chess?.inCheck\n\n  const reportCheckStatus = () => {\n    if (inCheckmate) {\n      sendToLog(`${colorsBySymbol.get(chess.turn)} is in checkmate`)\n    } else if (inCheck) {\n      sendToLog(`${colorsBySymbol.get(chess.turn)} is in check`)\n    }\n  }\n\n  useEffect(reportAppStatus, [sendToLog, appStatus.initializing])\n  useEffect(reportMove, [ui.pendingMove, processMove])\n  useEffect(reportCheckStatus, [inCheckmate, inCheck, sendToLog])\n}\n","import { useEffect } from 'react'\n\nexport default function useScrollToBottom(ref, state) {\n  return useEffect(() => {\n    ref.current.scrollTop = ref.current.scrollHeight\n  }, [ref, state])\n}\n","import React from 'react';\n\nimport useQueryChess from './hooks/useQueryChess'\nimport useAI from './hooks/useAI'\n\nimport Board from './components/Board'\nimport GameLog from './components/GameLog'\n\nexport default function App() {\n  useQueryChess()\n  useAI()\n\n  return (\n    <>\n      <Board/>\n      <GameLog/>\n    </>\n  )\n}\n","import { useEffect } from 'react'\n\nimport { APP_STARTED } from '../constants/actions'\nimport { GET_CHESS } from '../constants/graphql'\n\nimport useAPI from './useAPI'\n\nexport default function useQueryChess() {\n  const callAPI = useAPI()\n\n  useEffect(() => {\n    callAPI({\n      query: GET_CHESS,\n      types: [\n        APP_STARTED.REQUEST,\n        APP_STARTED.RECEIVE,\n        APP_STARTED.FAILURE\n      ]\n    })\n  }, [callAPI])\n}\n","import { useEffect, useCallback } from 'react'\n\nimport { AI_MOVE_DELAY } from '../constants/misc'\nimport { AI_COLOR } from '../constants/colors'\nimport { selectChess } from '../constants/selectors'\n\nimport useAppState from './useAppState'\nimport useActiveSquare from './useActiveSquare'\nimport useInitiateMove from './useInitiateMove'\n\nexport default function useAI() {\n  const chess = useAppState(selectChess)\n  const turn = chess?.turn\n  const gameOver = chess?.gameOver\n\n  const [, setActiveSquare] = useActiveSquare()\n  const moveInitiated = useInitiateMove()\n\n  const performMove = useCallback(\n    async () => {\n      const {\n        moves,\n        analysis\n      } = chess\n\n      const move = analysis?.bestMove ?? moves[0]\n\n      setActiveSquare(move.from)\n\n      await new Promise(\n        resolve => setTimeout(resolve, AI_MOVE_DELAY)\n      )\n\n      moveInitiated(chess, move.from, move.to)\n    }\n  , [chess, setActiveSquare, moveInitiated])\n\n  useEffect(() => {\n    if (!gameOver && turn === AI_COLOR) {\n      performMove()\n    }\n  }, [performMove, gameOver, turn])\n}\n","import {\n  APP_STARTED,\n  MOVE_INITIATED\n} from '../constants/actions'\n\nconst initialState = null\n\nconst generateMovesBySquare = (state) => {\n  return state.moves\n    .reduce((result, nextMove) => {\n      const movesForSquare = result[nextMove.from] || []\n      return {\n        ...result,\n        [nextMove.from]: [...movesForSquare, nextMove]\n      }\n    }, {})\n}\n\nconst generateSquares = (state) => {\n  return state.board.reduce(\n      (list, row) => {\n        const mappedRow = row.squares.map(\n          (square, index) => ({\n            piece: square.piece,\n            id: `${square.file}${row.rank}`,\n            isDark: row.rank % 2 ? !(index % 2) : index % 2\n          })\n        )\n        return [ ...list, ...mappedRow ]\n      },\n    [])\n}\n\nconst mapChessDataToState = (state) => {\n  const movesBySquare = generateMovesBySquare(state)\n  const squares = generateSquares(state)\n\n  return {\n    ...state,\n    squares,\n    movesBySquare\n  }\n}\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case APP_STARTED.RECEIVE:\n    case MOVE_INITIATED.RECEIVE: {\n      return mapChessDataToState(action.data.chess)\n    }\n\n    default:\n      return state\n  }\n}\n","import {\n  APP_STARTED,\n} from '../constants/actions'\n\nconst initialState = {\n  initializing: true\n}\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n\n    case APP_STARTED.RECEIVE: {\n      return { initializing: false }\n    }\n\n    case APP_STARTED.FAILURE: {\n      return { initializing: false, errors: action.errors }\n    }\n\n    default:\n      return state\n  }\n}\n","import formatDate from 'date-fns/format'\n\nimport {\n  EVENT_LOGGED\n} from '../constants/actions'\n\nconst initialState = []\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case EVENT_LOGGED: {\n      return [\n        ...state,\n        {\n          time: formatDate(new Date(), 'HH:mm:ss'),\n          message: action.data\n        }\n      ]\n    }\n\n    default:\n      return state\n  }\n}\n","import {\n  PIECE_SELECTED,\n  MOVE_INITIATED\n} from '../constants/actions'\n\nconst initialState = {\n  activeSquareId: null,\n  pendingMove: null\n}\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case PIECE_SELECTED: {\n      const canceled = (\n        action.squareId === state.activeSquareId\n      )\n\n      return {\n        ...state,\n        activeSquareId: canceled ? null : action.squareId\n      }\n    }\n\n    case MOVE_INITIATED.RECEIVE: {\n      return {\n        ...state,\n        pendingMove: null,\n        activeSquareId: null\n      }\n    }\n\n    case MOVE_INITIATED.REQUEST: {\n      return {\n        ...state,\n        pendingMove: action.data.variables.move\n      }\n    }\n\n    default:\n      return state\n  }\n}\n","import chess from './chess'\nimport appStatus from './appStatus'\nimport gameLog from './gameLog'\nimport ui from './ui'\n\nconst reducers = {\n  chess,\n  appStatus,\n  gameLog,\n  ui\n}\n\nexport default function root(state, action) {\n  return Object.entries(reducers)\n    .reduce(\n      (nextState, [key, reducer]) => {\n        const slice = reducer(state?.[key], action)\n        return {\n          ...nextState,\n          [key]: slice\n        }\n      }\n    , state)\n}\n","import React, { useReducer } from 'react';\n\nimport { INIT_STATE } from '../constants/actions'\n\nimport { AppDispatchContext } from '../hooks/useAppDispatch'\nimport { AppStateContext } from '../hooks/useAppState'\n\nimport reducer from '../reducers'\n\nexport default function Provider({ children }) {\n  const initialState = reducer(undefined, { type: INIT_STATE })\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <AppStateContext.Provider value={state}>\n      <AppDispatchContext.Provider value={dispatch}>\n        {children}\n      </AppDispatchContext.Provider>\n    </AppStateContext.Provider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './style/index.css'\nimport './style/breakpoints.css'\n\nimport App from './App'\nimport Provider from './components/Provider'\n\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider>\n      <App/>\n    </Provider>\n  </React.StrictMode>\n, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}