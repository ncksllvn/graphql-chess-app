{"version":3,"sources":["constants/actions.js","graphql/index.js","actions/index.js","selectors.js","constants/pieces.js","constants/colors.js","constants/visuals.js","components/Square.jsx","components/Board.jsx","components/Log.jsx","App.js","reducers/chess.js","reducers/appStatus.js","reducers/gameLog.js","reducers/ui.js","reducers/index.js","middleware/api.js","middleware/log.js","serviceWorker.js","index.js","middleware/ai.js"],"names":["APP_STARTED","MOVE_INITIATED","CHESS_FRAGMENT","GET_CHESS","MAKE_MOVE","pieceSelected","squareId","type","moveInitiated","fen","move","query","variables","types","getSelectedSquare","state","selectedSquareId","ui","square","chess","squares","find","id","moves","movesBySquare","targets","map","to","pieces","PAWN","KNIGHT","BISHOP","ROOK","QUEEN","KING","piecesBySymbol","Map","Object","entries","key","colors","WHITE","BLACK","colorsBySymbol","AI_COLOR","visuals","PIECES","COLORS","Square","piece","isDark","isActive","targetedBy","onClick","symbol","ariaLabel","classNames","push","PIECE_VISUALS","color","get","aria-label","disabled","className","join","Board","dispatch","useDispatch","useSelector","selectedSquare","useCallback","pieceSelectedAction","filter","from","promotion","moveInitiatedAction","turn","isTargeted","includes","Log","gameLog","containerEl","useRef","useEffect","current","scrollTop","scrollHeight","ref","role","aria-live","aria-atomic","gameEvent","index","App","mapChessDataToState","reduce","result","nextMove","movesForSquare","generateMovesBySquare","board","list","row","mappedRow","file","rank","generateSquares","initialState","loading","combineReducers","action","data","appStatus","errors","canceled","headers","timestampMessage","message","formatDate","Date","Boolean","window","location","hostname","match","middleware","next","a","request","receive","failure","queryOptions","body","JSON","stringify","options","method","fetch","process","response","ok","json","Error","normalized","name","stack","store","getState","analysis","bestMove","Promise","resolve","setTimeout","nextState","inCheckmate","inCheck","enhancers","composeWithDevTools","applyMiddleware","createStore","reducers","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.3a202593.chunk.js","sourcesContent":["export const CALL_API = 'CALL_API'\n\nexport const APP_STARTED = {\n  REQUEST: 'chess/REQUEST',\n  RECEIVE: 'chess/RECEIVE',\n  FAILURE: 'chess/FAILURE'\n}\n\nexport const MOVE_INITIATED = {\n  REQUEST: 'move/REQUEST',\n  RECEIVE: 'move/RECEIVE',\n  FAILURE: 'move/FAILURE'\n}\n\nexport const PIECE_SELECTED = 'PIECE_SELECTED'\n\nexport const EVENT_LOGGED = 'EVENT_LOGGED'\n","const CHESS_FRAGMENT = `\n  fragment ChessAttributes on Chess {\n      analysis {\n        bestMove {\n          from\n          to\n          flags\n        }\n        ponderMove {\n          from\n          to\n          flags\n        }\n      }\n      board {\n        rank\n        squares {\n          file\n          piece {\n            type\n            color\n          }\n        }\n      }\n      fen\n      gameOver\n      inCheck\n      inCheckmate\n      inDraw\n      inStalemate\n      insufficientMaterial\n      inThreefoldRepetition\n      moves {\n        color\n        from\n        to\n        promotion\n        flags\n      }\n      turn\n  }\n`\n\nexport const GET_CHESS = `\n  ${CHESS_FRAGMENT}\n  {\n    chess {\n      ... ChessAttributes\n    }\n  }\n`\n\nexport const MAKE_MOVE = `\n  ${CHESS_FRAGMENT}\n\n  mutation makeMove($fen: String!, $move: MoveObjectInput!){\n    chess: move (input: {\n      fen: $fen,\n      move: $move\n    }) {\n      ... ChessAttributes\n    }\n  }\n`\n","import {\n  CALL_API,\n  APP_STARTED,\n  PIECE_SELECTED,\n  MOVE_INITIATED\n} from '../constants/actions'\n\nimport {\n  GET_CHESS,\n  MAKE_MOVE\n} from '../graphql'\n\nexport function startApp() {\n  return {\n    [CALL_API]: {\n      query: GET_CHESS,\n      types: [\n        APP_STARTED.REQUEST,\n        APP_STARTED.RECEIVE,\n        APP_STARTED.FAILURE\n      ]\n    }\n  }\n}\n\nexport function pieceSelected(squareId) {\n  return { type: PIECE_SELECTED, squareId }\n}\n\nexport function moveInitiated(fen, move) {\n  return {\n    [CALL_API]: {\n      query: MAKE_MOVE,\n      variables: {\n        fen,\n        move\n      },\n      types: [\n        MOVE_INITIATED.REQUEST,\n        MOVE_INITIATED.RECEIVE,\n        MOVE_INITIATED.FAILURE\n      ]\n    }\n  }\n}\n","export function getSelectedSquare(state) {\n  const { selectedSquareId } = state.ui\n\n  if (!selectedSquareId) {\n    return null\n  }\n\n  const square = state.chess.squares.find(\n    (square) =>\n      square.id === selectedSquareId\n    )\n\n  const moves = state.chess.movesBySquare[square.id]\n  const targets = moves?.map(\n      (move) => move.to\n    )\n\n  return {\n    ...square,\n    targets\n  }\n}\n","const pieces = {\n  PAWN: 'p',\n  KNIGHT: 'n',\n  BISHOP: 'b',\n  ROOK: 'r',\n  QUEEN: 'q',\n  KING: 'k'\n}\n\nexport const piecesBySymbol =  new Map(\n  Object.entries(pieces).map(\n    ([key, value]) => [value, key]\n  )\n)\n\nexport default pieces\n","const colors = {\n  WHITE: 'w',\n  BLACK: 'b'\n}\n\nexport const colorsBySymbol =  new Map(\n  Object.entries(colors).map(\n    ([key, value]) => [value, key]\n  )\n)\n\nexport const USER_COLOR = colors.WHITE\nexport const AI_COLOR = colors.BLACK\n\nexport default colors\n","import COLORS from './colors'\nimport PIECES from './pieces'\n\nconst visuals = {\n  [PIECES.KING]: {\n    [COLORS.BLACK]: '\\u265A',\n    [COLORS.WHITE]: '\\u2654'\n  },\n  [PIECES.QUEEN]: {\n    [COLORS.BLACK]: '\\u265B',\n    [COLORS.WHITE]: '\\u2655'\n  },\n  [PIECES.ROOK]: {\n    [COLORS.BLACK]: '\\u265C',\n    [COLORS.WHITE]: '\\u2656'\n  },\n  [PIECES.BISHOP]: {\n    [COLORS.BLACK]: '\\u265D',\n    [COLORS.WHITE]: '\\u2657'\n  },\n  [PIECES.KNIGHT]: {\n    [COLORS.BLACK]: '\\u265E',\n    [COLORS.WHITE]: '\\u2658'\n  },\n  [PIECES.PAWN]: {\n    [COLORS.BLACK]: '\\u265F',\n    [COLORS.WHITE]: '\\u2659'\n  }\n}\n\nexport default visuals\n","import React from 'react'\n\nimport PIECE_VISUALS from '../constants/visuals'\n\nimport { piecesBySymbol } from '../constants/pieces'\nimport COLORS, { colorsBySymbol } from '../constants/colors'\n\nexport default function Square({ squareId, piece, isDark, isActive, targetedBy, onClick }) {\n  let symbol = null\n  let ariaLabel = `${squareId} is empty`\n  let classNames = ['chess-board-square']\n\n  if (isDark) {\n    classNames.push('chess-board-square--dark')\n  }\n\n  if (piece) {\n    symbol = PIECE_VISUALS[piece.type][piece.color]\n    ariaLabel =\n      `${squareId} contains a ${colorsBySymbol.get(piece.color)\n      } ${piecesBySymbol.get(piece.type)}`\n\n    if (piece.color === COLORS.BLACK) {\n      classNames.push('chess-board-square--black-piece')\n    }\n  }\n\n  if (isActive) {\n    classNames.push('chess-board-square--active')\n    ariaLabel =\n      `${squareId} contains a ${colorsBySymbol.get(piece.color)} ${piecesBySymbol.get(piece.type)\n      } selected for move. Use the tab keys to select a square to initiate move.${' '\n      } Press again to cancel selection.`\n  }\n\n  if (targetedBy) {\n    classNames.push('chess-board-square--targeted')\n    ariaLabel =\n      `Move ${piecesBySymbol.get(targetedBy.piece.type)} on ${targetedBy.id} ${\n      piece ? `to capture ${piecesBySymbol.get(piece.type)} on ${squareId}` : `to ${squareId}`\n    }`\n  }\n\n  return (\n    <button\n      type=\"button\"\n      aria-label={ariaLabel}\n      disabled={!onClick}\n      className={classNames.join(' ')}\n      onClick={() => onClick(squareId)}>\n      {symbol}\n    </button>\n  )\n}\n","import React, { useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport {\n  getSelectedSquare\n} from '../selectors'\n\nimport PIECES from '../constants/pieces'\nimport COLORS from '../constants/colors'\n\nimport {\n  pieceSelected as pieceSelectedAction,\n  moveInitiated as moveInitiatedAction\n} from '../actions'\n\nimport Square from './Square'\n\nexport default function Board() {\n  const dispatch = useDispatch()\n\n  const chess = useSelector(state => state.chess)\n  const selectedSquare = useSelector(getSelectedSquare)\n\n  const pieceSelected = useCallback(\n    (squareId) =>\n      dispatch(\n        pieceSelectedAction(squareId)\n      )\n    , [dispatch]\n  )\n\n  const moveInitiated = useCallback(\n    (squareId) => {\n      let { from, to, promotion } = chess.moves\n        .filter(\n          (move) => move.from === selectedSquare.id\n        ).find(\n          (move) => move.to === squareId\n        )\n\n      if (promotion) {\n        promotion = PIECES.QUEEN\n      }\n\n      dispatch(\n        moveInitiatedAction(chess.fen, { from, to, promotion })\n      )\n    }, [dispatch, chess, selectedSquare]\n  )\n\n  if (!chess) {\n    return <div className=\"chess-board--loading\"/>\n  }\n\n  const classNames= ['chess-board']\n\n  if (chess.turn === COLORS.BLACK) {\n    classNames.push('chess-board--black-turn')\n  }\n\n  return (\n    <div className={classNames.join(' ')}>\n      {chess.squares.map(({ id: squareId, piece, isDark }) => {\n        const isActive = (\n          squareId === selectedSquare?.id\n        )\n\n        const isTargeted = (\n          selectedSquare?.targets?.includes(squareId)\n        )\n\n        const targetedBy = (\n          isTargeted ? selectedSquare : null\n        )\n\n        const onClick = isTargeted ? moveInitiated : (\n          piece ? pieceSelected : null\n        )\n\n        return (\n          <Square\n            key={squareId}\n            piece={piece}\n            squareId={squareId}\n            isDark={isDark}\n            isActive={isActive}\n            targetedBy={targetedBy}\n            onClick={onClick}/>\n        )\n      })}\n    </div>\n  )\n}\n","import React, { useRef, useEffect } from 'react'\nimport { useSelector } from 'react-redux'\n\n// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_log_role\nexport default function Log(){\n  const gameLog = useSelector(state => state.gameLog)\n  const containerEl = useRef(null)\n\n  useEffect(() => {\n    containerEl.current.scrollTop = containerEl.current.scrollHeight\n  }, [gameLog])\n\n  return (\n    <div ref={containerEl} className=\"console\" role=\"log\">\n      <ul className=\"console-output\" aria-live=\"polite\" aria-atomic=\"false\">\n        {gameLog?.map((gameEvent, index) =>\n          <li key={index} className=\"console-output-item\">{gameEvent}</li>\n        )}\n      </ul>\n    </div>\n  )\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux'\n\nimport { startApp } from './actions'\n\nimport Board from './components/Board'\nimport Log from './components/Log'\n\nexport default function App() {\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(startApp())\n  }, [dispatch])\n\n  return (\n    <>\n      <Board/>\n      <Log/>\n    </>\n  );\n}\n","import {\n  APP_STARTED,\n  MOVE_INITIATED\n} from '../constants/actions'\n\nconst initialState = null\n\nconst generateMovesBySquare = (state) => {\n  return state.moves\n    .reduce((result, nextMove) => {\n      const movesForSquare = result[nextMove.from] || []\n      return {\n        ...result,\n        [nextMove.from]: [...movesForSquare, nextMove]\n      }\n    }, {})\n}\n\nconst generateSquares = (state) => {\n  return state.board.reduce(\n      (list, row) => {\n        const mappedRow = row.squares.map(\n          (square, index) => ({\n            piece: square.piece,\n            id: `${square.file}${row.rank}`,\n            isDark: row.rank % 2 ? !(index % 2) : index % 2\n          })\n        )\n        return [ ...list, ...mappedRow ]\n      },\n    [])\n}\n\nconst mapChessDataToState = (state) => {\n  const movesBySquare = generateMovesBySquare(state)\n  const squares = generateSquares(state)\n\n  return {\n    ...state,\n    squares,\n    movesBySquare\n  }\n}\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case APP_STARTED.RECEIVE:\n    case MOVE_INITIATED.RECEIVE: {\n      return mapChessDataToState(action.data.chess)\n    }\n\n    default:\n      return state\n  }\n}\n","import {\n  APP_STARTED,\n  MOVE_INITIATED\n} from '../constants/actions'\n\nconst initialState = {\n  loading: true\n}\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case APP_STARTED.REQUEST: {\n      return { loading: true }\n    }\n\n    case APP_STARTED.RECEIVE: {\n      return { loading: false }\n    }\n\n    case MOVE_INITIATED.RECEIVE: {\n      return { loading: false }\n    }\n\n    case APP_STARTED.FAILURE: {\n      return { loading: false, errors: action.errors }\n    }\n\n    default:\n      return state\n  }\n}\n","import {\n  EVENT_LOGGED\n} from '../constants/actions'\n\nconst initialState = []\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case EVENT_LOGGED: {\n      return [...state, action.data]\n    }\n\n    default:\n      return state\n  }\n}\n","import {\n  PIECE_SELECTED,\n  MOVE_INITIATED\n} from '../constants/actions'\n\nconst initialState = {\n  selectedSquareId: null\n}\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case PIECE_SELECTED: {\n      const canceled = (\n        action.squareId === state.selectedSquareId\n      )\n\n      return {\n        selectedSquareId: canceled ? null : action.squareId\n      }\n    }\n\n    case MOVE_INITIATED.RECEIVE: {\n      return { selectedSquareId: null }\n    }\n\n    default:\n      return state\n  }\n}\n","import {\n  combineReducers\n} from 'redux'\n\nimport chess from './chess'\nimport appStatus from './appStatus'\nimport gameLog from './gameLog'\nimport ui from './ui'\n\nexport default combineReducers({\n  chess,\n  appStatus,\n  gameLog,\n  ui\n})\n","import {\n  CALL_API\n} from '../constants/actions'\n\nconst serverUrl = process.env.REACT_APP_API\nconst method = 'POST'\nconst headers =  {\n  'Content-Type': 'application/json'\n}\n\nexport default () => next => async action => {\n  if (!action[CALL_API]) {\n    return next(action)\n  }\n\n  const {\n    query,\n    variables,\n    types: [request, receive, failure]\n  } = action[CALL_API]\n\n  const queryOptions = { query, variables }\n  const body = JSON.stringify(queryOptions)\n  const options = { method, headers, body }\n\n  next({\n    type: request,\n    data: { query, variables }\n  })\n\n  try {\n    const response = await fetch(serverUrl, options)\n\n    if (response.ok) {\n      const json = await response.json()\n      const { data, errors } = json\n\n      if (data) {\n        next({ type: receive, data, variables })\n      }\n\n      if (errors) {\n        next({ type: failure, errors })\n      }\n    } else {\n      throw new Error('Response not ok')\n    }\n  } catch(error) {\n    let normalized = error\n    if (error instanceof Error) {\n      normalized = {\n        name: error.name,\n        message: error.message,\n        stack: error.stack\n      }\n    }\n    next({ type: failure, errors: [normalized] })\n  }\n}\n","import formatDate from 'date-fns/format'\n\nimport { piecesBySymbol } from '../constants/pieces'\nimport { colorsBySymbol } from '../constants/colors'\n\nimport {\n  APP_STARTED,\n  MOVE_INITIATED,\n  EVENT_LOGGED\n} from '../constants/actions'\n\nconst timestampMessage = (message) => (\n  `[${formatDate(new Date(), 'HH:mm:ss')}] ${message}`\n)\n\nexport default store => next => async action => {\n  switch (action.type) {\n    case APP_STARTED.REQUEST: {\n      store.dispatch({\n        type: EVENT_LOGGED,\n        data: timestampMessage('Initializing game...')\n      })\n\n      return next(action)\n    }\n\n    case APP_STARTED.RECEIVE: {\n      store.dispatch({\n        type: EVENT_LOGGED,\n        data: timestampMessage('Game ready')\n      })\n      return next(action)\n    }\n\n    case APP_STARTED.FAILURE: {\n      store.dispatch({\n        type: EVENT_LOGGED,\n        data: timestampMessage('Failed to start game')\n      })\n      return next(action)\n    }\n\n    case MOVE_INITIATED.RECEIVE: {\n      const { move } = action.variables\n      const state = store.getState()\n\n      const from = state.chess.squares.find(\n        (square) => square.id === move.from\n      )\n\n      const to = state.chess.squares.find(\n        (square) => square.id === move.to\n      )\n\n      let message = null\n\n      if (to.piece) {\n        message = `\n          ${colorsBySymbol.get(from.piece.color)} ${piecesBySymbol.get(from.piece.type)\n          } on ${from.id} captures ${piecesBySymbol.get(to.piece.type)} on ${to.id}`\n      } else {\n        message = `\n          ${colorsBySymbol.get(from.piece.color)} ${piecesBySymbol.get(from.piece.type)\n          } moves from ${from.id} to ${to.id}`\n      }\n\n      store.dispatch({\n        type: EVENT_LOGGED,\n        data: timestampMessage(message)\n      })\n\n      next(action)\n\n      const nextState = store.getState()\n\n      if (nextState.chess.inCheckmate) {\n        store.dispatch({\n          type: EVENT_LOGGED,\n          data: timestampMessage(`${colorsBySymbol.get(nextState.chess.turn)} is in checkmate`)\n        })\n      } else if (nextState.chess.inCheck) {\n        store.dispatch({\n          type: EVENT_LOGGED,\n          data: timestampMessage(`${colorsBySymbol.get(nextState.chess.turn)} is in check`)\n        })\n      }\n\n      return\n    }\n\n    default:\n      break\n  }\n\n  next(action)\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// import '98.css'\nimport './style/index.css';\nimport './style/breakpoints.css';\nimport './style/spinner.css';\n\nimport App from './App';\nimport reducers from './reducers'\nimport api from './middleware/api'\nimport ai from './middleware/ai'\nimport log from './middleware/log'\nimport * as serviceWorker from './serviceWorker';\n\nconst middleware = [api, ai, log]\nconst enhancers = composeWithDevTools(applyMiddleware(...middleware))\nconst store = createStore(reducers, enhancers)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {\n  MOVE_INITIATED\n} from '../constants/actions'\n\nimport {\n  AI_COLOR\n} from '../constants/colors'\n\nimport PIECES from '../constants/pieces'\n\nimport {\n  pieceSelected,\n  moveInitiated\n} from '../actions'\n\nconst aiMoveDelay = 1000\n\nexport default store => next => async action => {\n  next(action)\n\n  if (action.type === MOVE_INITIATED.RECEIVE) {\n    const {\n      chess: {\n        fen,\n        turn,\n        moves,\n        analysis\n      }\n    } = store.getState()\n\n    if (turn === AI_COLOR) {\n      let move = null\n\n      if (!analysis?.bestMove) {\n        move = moves[0]\n      } else {\n        // @todo bestMove doesn't include the promotion flag, so we grab\n        // the corresponding move from the moves array\n        const { bestMove } = analysis\n        move = moves.find(\n          move => move.from === bestMove.from && move.to === bestMove.to\n        )\n      }\n\n      let { from, to, promotion } = move\n\n      if (promotion) {\n        promotion = PIECES.QUEEN\n      }\n\n      store.dispatch(\n        pieceSelected(from)\n      )\n\n      await new Promise(resolve => setTimeout(resolve, aiMoveDelay))\n\n      store.dispatch(\n        moveInitiated(fen, { from, to, promotion })\n      )\n    }\n  }\n}\n"],"sourceRoot":""}