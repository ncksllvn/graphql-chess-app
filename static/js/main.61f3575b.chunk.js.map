{"version":3,"sources":["constants/actions.js","hooks/useDispatch.js","hooks/useSelector.js","graphql/index.js","constants/colors.js","hooks/usePieceSelected.js","constants/pieces.js","hooks/useAPI.js","hooks/useMoveInitiated.js","constants/visuals.js","components/Square.jsx","components/Board.jsx","hooks/useActiveSquare.js","components/Log.jsx","hooks/useLog.js","hooks/useScrollToBottom.js","App.js","hooks/useAI.js","reducers/chess.js","reducers/appStatus.js","reducers/gameLog.js","reducers/ui.js","reducers/index.js","serviceWorker.js","index.js"],"names":["APP_STARTED","MOVE_INITIATED","DispatchContext","React","createContext","useDispatch","useContext","StateContext","useSelector","selector","state","useMemo","selectAppStatus","appStatus","selectChess","chess","selectGameLog","gameLog","selectUI","ui","CHESS_FRAGMENT","GET_CHESS","MAKE_MOVE","colors","WHITE","BLACK","colorsBySymbol","Map","Object","entries","map","key","USER_COLOR","AI_COLOR","usePieceSelected","dispatch","useCallback","squareId","type","pieces","PAWN","KNIGHT","BISHOP","ROOK","QUEEN","KING","piecesBySymbol","headers","useAPI","a","query","variables","types","request","receive","failure","queryOptions","body","JSON","stringify","options","method","data","fetch","process","response","ok","json","errors","Error","normalized","name","message","stack","useMoveInitiated","callAPI","sourceSquareId","destinationSquareId","moves","find","move","from","to","promotion","PIECES","fen","visuals","COLORS","Square","piece","isDark","isActive","targetedBy","onClick","symbol","ariaLabel","classNames","push","PIECE_VISUALS","color","get","id","aria-label","aria-pressed","disabled","className","join","Board","selectedSquare","selectedSquareId","squares","movesBySquare","square","targets","useActiveSquare","pieceSelected","moveInitiated","turn","isPlayerTurn","isTargeted","includes","Log","ref","useRef","sendToLog","processMove","inCheckmate","inCheck","useEffect","initializing","pendingMove","useLog","current","scrollTop","scrollHeight","useScrollToBottom","role","aria-live","aria-atomic","gameEvent","index","dateTime","time","App","gameOver","performMove","analysis","bestMove","Promise","resolve","setTimeout","useAI","mapChessDataToState","reduce","result","nextMove","movesForSquare","generateMovesBySquare","board","list","row","mappedRow","file","rank","generateSquares","initialState","reducers","action","formatDate","Date","canceled","root","nextState","slice","reducer","Boolean","window","location","hostname","match","Root","undefined","useReducer","StrictMode","Provider","value","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.61f3575b.chunk.js","sourcesContent":["export const INIT_STATE = 'INIT_STATE'\n\nexport const APP_STARTED = {\n  REQUEST: 'chess/REQUEST',\n  RECEIVE: 'chess/RECEIVE',\n  FAILURE: 'chess/FAILURE'\n}\n\nexport const MOVE_INITIATED = {\n  REQUEST: 'move/REQUEST',\n  RECEIVE: 'move/RECEIVE',\n  FAILURE: 'move/FAILURE'\n}\n\nexport const PIECE_SELECTED = 'PIECE_SELECTED'\n\nexport const EVENT_LOGGED = 'EVENT_LOGGED'\n","import React, { useContext } from 'react'\n\nexport const DispatchContext = React.createContext(null);\n\nexport default function useDispatch() {\n  return useContext(DispatchContext)\n}\n","import React, { useContext } from 'react'\n\nexport const StateContext = React.createContext(null);\n\nexport default function useSelector(selector) {\n  const state = useContext(StateContext)\n  return React.useMemo(\n    () => {\n      return selector(state)\n    }\n  ,[selector, state])\n}\n\nexport function selectAppStatus(state) {\n  return state.appStatus\n}\n\nexport function selectChess(state) {\n  return state.chess\n}\n\nexport function selectGameLog(state) {\n  return state.gameLog\n}\n\nexport function selectUI(state) {\n  return state.ui\n}\n","const CHESS_FRAGMENT = `\n  fragment ChessAttributes on Chess {\n      analysis {\n        bestMove {\n          from\n          to\n          flags\n        }\n        ponderMove {\n          from\n          to\n          flags\n        }\n      }\n      board {\n        rank\n        squares {\n          file\n          piece {\n            type\n            color\n          }\n        }\n      }\n      fen\n      gameOver\n      inCheck\n      inCheckmate\n      inDraw\n      inStalemate\n      insufficientMaterial\n      inThreefoldRepetition\n      moves {\n        color\n        from\n        to\n        promotion\n        flags\n      }\n      turn\n  }\n`\n\nexport const GET_CHESS = `\n  ${CHESS_FRAGMENT}\n  {\n    chess {\n      ... ChessAttributes\n    }\n  }\n`\n\nexport const MAKE_MOVE = `\n  ${CHESS_FRAGMENT}\n\n  mutation makeMove($fen: String!, $move: MoveObjectInput!){\n    chess: move (input: {\n      fen: $fen,\n      move: $move\n    }) {\n      ... ChessAttributes\n    }\n  }\n`\n","const colors = {\n  WHITE: 'w',\n  BLACK: 'b'\n}\n\nexport const colorsBySymbol =  new Map(\n  Object.entries(colors).map(\n    ([key, value]) => [value, key]\n  )\n)\n\nexport const USER_COLOR = colors.WHITE\nexport const AI_COLOR = colors.BLACK\n\nexport default colors\n","import React from 'react'\nimport useDispatch from './useDispatch'\n\nimport {\n  PIECE_SELECTED\n} from '../constants/actions'\n\nexport default function usePieceSelected() {\n  const dispatch = useDispatch()\n  return React.useCallback(\n    (squareId) => (\n      dispatch({ type: PIECE_SELECTED, squareId })\n    )\n  ,[dispatch])\n}\n","const pieces = {\n  PAWN: 'p',\n  KNIGHT: 'n',\n  BISHOP: 'b',\n  ROOK: 'r',\n  QUEEN: 'q',\n  KING: 'k'\n}\n\nexport const piecesBySymbol =  new Map(\n  Object.entries(pieces).map(\n    ([key, value]) => [value, key]\n  )\n)\n\nexport default pieces\n","import { useCallback } from 'react'\nimport useDispatch from './useDispatch'\n\nconst serverUrl = process.env.REACT_APP_API\nconst method = 'POST'\nconst headers =  {\n  'Content-Type': 'application/json'\n}\n\nexport default function useAPI() {\n  const dispatch = useDispatch()\n\n  return useCallback(\n    async ({ query, variables, types }) => {\n      const [request, receive, failure] = types\n      const queryOptions = { query, variables }\n      const body = JSON.stringify(queryOptions)\n      const options = { method, headers, body }\n\n      dispatch({\n        type: request,\n        data: { query, variables }\n      })\n\n      try {\n        const response = await fetch(serverUrl, options)\n\n        if (response.ok) {\n          const json = await response.json()\n          const { data, errors } = json\n\n          dispatch({ type: receive, data, errors })\n        } else {\n          throw new Error('Response not ok')\n        }\n      } catch(error) {\n        let normalized = error\n        if (error instanceof Error) {\n          normalized = {\n            name: error.name,\n            message: error.message,\n            stack: error.stack\n          }\n        }\n\n        dispatch({ type: failure, errors: [normalized] })\n      }\n    }\n  , [dispatch])\n}\n","import { useCallback } from 'react'\n\nimport { MAKE_MOVE } from '../graphql'\nimport { MOVE_INITIATED } from '../constants/actions'\n\nimport PIECES from '../constants/pieces'\nimport useAPI from './useAPI'\n\nexport default function useMoveInitiated() {\n  const callAPI = useAPI()\n\n  const moveInitiated = useCallback(\n    (chess, sourceSquareId, destinationSquareId) => {\n      let { from, to, promotion } = chess.moves.find(\n        (move) => (\n          move.from === sourceSquareId &&\n          move.to === destinationSquareId\n        )\n      )\n\n      if (promotion) {\n        promotion = PIECES.QUEEN\n      }\n\n      callAPI({\n        query: MAKE_MOVE,\n        variables: {\n          fen: chess.fen,\n          move: { from, to, promotion }\n        },\n        types: [\n          MOVE_INITIATED.REQUEST,\n          MOVE_INITIATED.RECEIVE,\n          MOVE_INITIATED.FAILURE\n        ]\n      })\n    }\n  , [callAPI])\n\n  return moveInitiated\n}\n","import COLORS from './colors'\nimport PIECES from './pieces'\n\nconst visuals = {\n  [PIECES.KING]: {\n    [COLORS.BLACK]: '\\u265A',\n    [COLORS.WHITE]: '\\u2654'\n  },\n  [PIECES.QUEEN]: {\n    [COLORS.BLACK]: '\\u265B',\n    [COLORS.WHITE]: '\\u2655'\n  },\n  [PIECES.ROOK]: {\n    [COLORS.BLACK]: '\\u265C',\n    [COLORS.WHITE]: '\\u2656'\n  },\n  [PIECES.BISHOP]: {\n    [COLORS.BLACK]: '\\u265D',\n    [COLORS.WHITE]: '\\u2657'\n  },\n  [PIECES.KNIGHT]: {\n    [COLORS.BLACK]: '\\u265E',\n    [COLORS.WHITE]: '\\u2658'\n  },\n  [PIECES.PAWN]: {\n    [COLORS.BLACK]: '\\u265F',\n    [COLORS.WHITE]: '\\u2659'\n  }\n}\n\nexport default visuals\n","import React from 'react'\n\nimport PIECE_VISUALS from '../constants/visuals'\nimport { piecesBySymbol } from '../constants/pieces'\nimport COLORS, { colorsBySymbol } from '../constants/colors'\n\nexport default function Square({ squareId, piece, isDark, isActive, targetedBy, onClick }) {\n  let symbol = null\n  let ariaLabel = `${squareId} is empty`\n  let classNames = ['chess-board-square', `chess-board-square--${squareId}`]\n\n  if (isDark) {\n    classNames.push('chess-board-square--dark')\n  }\n\n  if (onClick) {\n    classNames.push('chess-board-square--clickable')\n  }\n\n  if (piece) {\n    symbol = PIECE_VISUALS[piece.type][piece.color]\n    ariaLabel =\n      `${squareId} contains a ${colorsBySymbol.get(piece.color)\n      } ${piecesBySymbol.get(piece.type)}`\n\n    if (piece.color === COLORS.BLACK) {\n      classNames.push('chess-board-square--black-piece')\n    }\n  }\n\n  if (isActive) {\n    classNames.push('chess-board-square--active')\n    ariaLabel =\n      `${squareId} contains a ${colorsBySymbol.get(piece.color)} ${piecesBySymbol.get(piece.type)\n      } selected for move. Use the tab keys to select a square to initiate move.${' '\n      } Press again to cancel selection.`\n  }\n\n  if (targetedBy) {\n    classNames.push('chess-board-square--targeted')\n    ariaLabel =\n      `Move ${piecesBySymbol.get(targetedBy.piece.type)} on ${targetedBy.id} ${\n      piece ? `to capture ${piecesBySymbol.get(piece.type)} on ${squareId}` : `to ${squareId}`\n    }`\n  }\n\n  return (\n    <button\n      type=\"button\"\n      aria-label={ariaLabel}\n      aria-pressed={isActive}\n      disabled={!onClick}\n      className={classNames.join(' ')}\n      onClick={() => onClick(squareId)}>\n      {symbol}\n    </button>\n  )\n}\n","import React from 'react'\nimport useSelector, { selectChess } from '../hooks/useSelector'\n\nimport COLORS, {\n  USER_COLOR\n} from '../constants/colors'\n\nimport useActiveSquare from '../hooks/useActiveSquare'\nimport usePieceSelected from '../hooks/usePieceSelected'\nimport useMoveInitiated from '../hooks/useMoveInitiated'\n\nimport Square from './Square'\n\nexport default function Board() {\n  const chess = useSelector(selectChess)\n  const selectedSquare = useActiveSquare()\n  const pieceSelected = usePieceSelected()\n  const moveInitiated = useMoveInitiated()\n\n  if (!chess) {\n    return <div className=\"chess-board--loading\"/>\n  }\n\n  const classNames= ['chess-board']\n\n  if (chess.turn === COLORS.BLACK) {\n    classNames.push('chess-board--black-turn')\n  }\n\n  return (\n    <div className={classNames.join(' ')}>\n      {chess.squares.map(\n        ({ id: squareId, piece, isDark }) => {\n          const isActive = (\n            squareId === selectedSquare?.id\n          )\n\n          const isPlayerTurn = (\n            chess.turn === USER_COLOR\n          )\n\n          const isTargeted = (\n            selectedSquare?.targets?.includes(squareId)\n          )\n\n          const targetedBy = (\n            isTargeted ? selectedSquare : null\n          )\n\n          let onClick = null\n\n          if (isPlayerTurn) {\n            if (isTargeted) {\n              onClick = (squareId) => moveInitiated(chess, selectedSquare.id, squareId)\n            } else if (piece?.color === USER_COLOR) {\n              onClick = (squareId) => pieceSelected(squareId)\n            }\n          }\n\n          return (\n            <Square\n              key={squareId}\n              piece={piece}\n              squareId={squareId}\n              isDark={isDark}\n              isActive={isActive}\n              targetedBy={targetedBy}\n              onClick={onClick}/>\n          )\n        }\n      )}\n    </div>\n  )\n}\n","import React from 'react'\n\nimport useSelector, {\n  selectUI,\n  selectChess\n} from './useSelector'\n\nexport default function useActiveSquare() {\n  const chess = useSelector(selectChess)\n  const { selectedSquareId } = useSelector(selectUI)\n\n  const squares = chess?.squares\n  const movesBySquare = chess?.movesBySquare\n\n  return React.useMemo(() => {\n    if (!selectedSquareId) {\n      return null\n    }\n\n    const square = squares.find(\n      (square) =>\n        square.id === selectedSquareId\n      )\n\n    const moves = movesBySquare[square.id]\n    const targets = moves?.map(\n        (move) => move.to\n      )\n\n    return {\n      ...square,\n      targets\n    }\n  }, [selectedSquareId, squares, movesBySquare])\n}\n","import React, { useRef } from 'react'\n\nimport useSelector, { selectGameLog } from '../hooks/useSelector'\nimport useLog from '../hooks/useLog'\nimport useScrollToBottom from '../hooks/useScrollToBottom'\n\n// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_log_role\nexport default function Log(){\n  const gameLog = useSelector(selectGameLog)\n  const ref = useRef(null)\n\n  useLog()\n  useScrollToBottom(ref, gameLog)\n\n  return (\n    <div ref={ref} className=\"console\" role=\"log\">\n      <ul className=\"console-output\" aria-live=\"polite\" aria-atomic=\"false\">\n        {gameLog?.map((gameEvent, index) =>\n          <li key={index} className=\"console-output-item\">\n            [<time dateTime={gameEvent.time}>{gameEvent.time}</time>] {gameEvent.message}\n          </li>\n        )}\n      </ul>\n    </div>\n  )\n}\n","import { useEffect, useCallback } from 'react'\n\nimport useDispatch from './useDispatch'\nimport useSelector, {\n  selectAppStatus,\n  selectChess,\n  selectUI\n} from './useSelector'\n\nimport {\n  EVENT_LOGGED\n} from '../constants/actions'\n\nimport { piecesBySymbol } from '../constants/pieces'\nimport { colorsBySymbol } from '../constants/colors'\n\nexport default function useLog() {\n  const dispatch = useDispatch()\n  const appStatus = useSelector(selectAppStatus)\n  const chess = useSelector(selectChess)\n  const ui = useSelector(selectUI)\n\n  const sendToLog = useCallback(\n    (data) => {\n      dispatch({ type: EVENT_LOGGED, data })\n    }\n  , [dispatch])\n\n  const processMove = useCallback(\n    (move) => {\n      const from = chess.squares.find(\n        (square) => square.id === move.from\n      )\n\n      const to = chess.squares.find(\n        (square) => square.id === move.to\n      )\n\n      let message = null\n\n      if (to.piece) {\n        message = `\n          ${colorsBySymbol.get(from.piece.color)} ${piecesBySymbol.get(from.piece.type)\n          } on ${from.id} captures ${piecesBySymbol.get(to.piece.type)} on ${to.id}`\n      } else {\n        message = `\n          ${colorsBySymbol.get(from.piece.color)} ${piecesBySymbol.get(from.piece.type)\n          } moves from ${from.id} to ${to.id}`\n      }\n\n      sendToLog(message)\n    }\n  , [chess, sendToLog])\n\n  const reportAppStatus = () => {\n    if (appStatus.initializing) {\n      sendToLog('initializing game...')\n    } else {\n      sendToLog('game ready')\n    }\n  }\n\n  const reportMove = () => {\n    if (ui.pendingMove) {\n      processMove(ui.pendingMove)\n    }\n  }\n\n  const inCheckmate = chess?.inCheckmate\n  const inCheck = chess?.inCheck\n\n  const reportCheckStatus = () => {\n    if (inCheckmate) {\n      sendToLog(`${colorsBySymbol.get(chess.turn)} is in checkmate`)\n    } else if (inCheck) {\n      sendToLog(`${colorsBySymbol.get(chess.turn)} is in check`)\n    }\n  }\n\n  useEffect(reportAppStatus, [sendToLog, appStatus.initializing])\n  useEffect(reportMove, [ui.pendingMove, processMove])\n  useEffect(reportCheckStatus, [inCheckmate, inCheck, sendToLog])\n}\n","import { useEffect } from 'react'\n\nexport default function useScrollToBottom(ref, state) {\n  return useEffect(() => {\n    ref.current.scrollTop = ref.current.scrollHeight\n  }, [ref, state])\n}\n","import React, { useEffect } from 'react';\n\nimport { GET_CHESS } from './graphql'\nimport { APP_STARTED } from './constants/actions'\n\nimport useAI from './hooks/useAI'\nimport useAPI from './hooks/useAPI'\n\nimport Board from './components/Board'\nimport Log from './components/Log'\n\nexport default function App() {\n  const callAPI = useAPI()\n\n  useEffect(() => {\n    callAPI({\n      query: GET_CHESS,\n      types: [\n        APP_STARTED.REQUEST,\n        APP_STARTED.RECEIVE,\n        APP_STARTED.FAILURE\n      ]\n    })\n  }, [callAPI])\n\n  useAI()\n\n  return (\n    <>\n      <Board/>\n      <Log/>\n    </>\n  )\n}\n","import { useEffect, useCallback } from 'react'\n\nimport useSelector, { selectChess } from './useSelector'\n\nimport {\n  AI_COLOR\n} from '../constants/colors'\n\nimport usePieceSelected from './usePieceSelected'\nimport useMoveInitiated from './useMoveInitiated'\n\nconst AI_MOVE_DELAY = 1000\n\nexport default function useAI() {\n  const chess = useSelector(selectChess)\n  const turn = chess?.turn\n  const gameOver = chess?.gameOver\n\n  const pieceSelected = usePieceSelected()\n  const moveInitiated = useMoveInitiated()\n\n  const performMove = useCallback(\n    async () => {\n      const {\n        moves,\n        analysis\n      } = chess\n\n      const move = analysis?.bestMove ?? moves[0]\n\n      pieceSelected(move.from)\n\n      await new Promise(\n        resolve => setTimeout(resolve, AI_MOVE_DELAY)\n      )\n\n      moveInitiated(chess, move.from, move.to)\n    }\n  , [chess, pieceSelected, moveInitiated])\n\n  useEffect(() => {\n    if (!gameOver && turn === AI_COLOR) {\n      performMove()\n    }\n  }, [performMove, gameOver, turn])\n}\n","import {\n  APP_STARTED,\n  MOVE_INITIATED\n} from '../constants/actions'\n\nconst initialState = null\n\nconst generateMovesBySquare = (state) => {\n  return state.moves\n    .reduce((result, nextMove) => {\n      const movesForSquare = result[nextMove.from] || []\n      return {\n        ...result,\n        [nextMove.from]: [...movesForSquare, nextMove]\n      }\n    }, {})\n}\n\nconst generateSquares = (state) => {\n  return state.board.reduce(\n      (list, row) => {\n        const mappedRow = row.squares.map(\n          (square, index) => ({\n            piece: square.piece,\n            id: `${square.file}${row.rank}`,\n            isDark: row.rank % 2 ? !(index % 2) : index % 2\n          })\n        )\n        return [ ...list, ...mappedRow ]\n      },\n    [])\n}\n\nconst mapChessDataToState = (state) => {\n  const movesBySquare = generateMovesBySquare(state)\n  const squares = generateSquares(state)\n\n  return {\n    ...state,\n    squares,\n    movesBySquare\n  }\n}\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case APP_STARTED.RECEIVE:\n    case MOVE_INITIATED.RECEIVE: {\n      return mapChessDataToState(action.data.chess)\n    }\n\n    default:\n      return state\n  }\n}\n","import {\n  APP_STARTED,\n} from '../constants/actions'\n\nconst initialState = {\n  initializing: true\n}\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n\n    case APP_STARTED.RECEIVE: {\n      return { initializing: false }\n    }\n\n    case APP_STARTED.FAILURE: {\n      return { initializing: false, errors: action.errors }\n    }\n\n    default:\n      return state\n  }\n}\n","import formatDate from 'date-fns/format'\n\nimport {\n  EVENT_LOGGED\n} from '../constants/actions'\n\nconst initialState = []\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case EVENT_LOGGED: {\n      return [\n        ...state,\n        {\n          time: formatDate(new Date(), 'HH:mm:ss'),\n          message: action.data\n        }\n      ]\n    }\n\n    default:\n      return state\n  }\n}\n","import {\n  PIECE_SELECTED,\n  MOVE_INITIATED\n} from '../constants/actions'\n\nconst initialState = {\n  selectedSquareId: null,\n  pendingMove: null\n}\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case PIECE_SELECTED: {\n      const canceled = (\n        action.squareId === state.selectedSquareId\n      )\n\n      return {\n        ...state,\n        selectedSquareId: canceled ? null : action.squareId\n      }\n    }\n\n    case MOVE_INITIATED.RECEIVE: {\n      return {\n        ...state,\n        pendingMove: null,\n        selectedSquareId: null\n      }\n    }\n\n    case MOVE_INITIATED.REQUEST: {\n      return {\n        ...state,\n        pendingMove: action.data.variables.move\n      }\n    }\n\n    default:\n      return state\n  }\n}\n","import chess from './chess'\nimport appStatus from './appStatus'\nimport gameLog from './gameLog'\nimport ui from './ui'\n\nconst reducers = {\n  chess,\n  appStatus,\n  gameLog,\n  ui\n}\n\nexport default function root(state, action) {\n  return Object.entries(reducers)\n    .reduce(\n      (nextState, [key, reducer]) => {\n        const slice = reducer(state?.[key], action)\n        return {\n          ...nextState,\n          [key]: slice\n        }\n      }\n    , state)\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useReducer } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './style/index.css';\nimport './style/breakpoints.css';\n\nimport { INIT_STATE } from './constants/actions'\n\nimport { DispatchContext } from './hooks/useDispatch'\nimport { StateContext } from './hooks/useSelector'\n\nimport App from './App';\nimport reducer from './reducers'\n\nimport * as serviceWorker from './serviceWorker';\n\nfunction Root() {\n  const initialState = reducer(undefined, { type: INIT_STATE })\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <React.StrictMode>\n      <StateContext.Provider value={state}>\n        <DispatchContext.Provider value={dispatch}>\n          <App/>\n        </DispatchContext.Provider>\n      </StateContext.Provider>\n    </React.StrictMode>\n  );\n}\n\nReactDOM.render(<Root/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}